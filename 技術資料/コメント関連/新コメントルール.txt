■資料の優先順位(文言とか)
①：このテキストファイル
②：先生の作った例文ファイル
③：その他外部資料

■文言の統一
・変数やクラス名やメソッド名
　　→言い切りの形(変数名はそのまま、クラス名には「～クラス」、メソッド名には「～メソッド」)
　　　例：クレジットカード情報存在チェックメソッド

・プログラムの動きの説明
　　→ですます。(句読点も！！)
　　　例：引数にてクレジットカード番号を指定する事で該当するものが存在するか確認できます。
　　　　　　結果はtrueもしくはfalseにて返され、存在すればtrue、存在しなければfalseとなります。

■注意点
改行で一行空けるのは、各メンバ変数の後もしくはメソッドの後、クラスの後のみ。
メソッド内で改行で一行空けるのは禁止。
-------------------
説明文はできるだけ具体的書くこと。

悪い例：
MySQLのデータを取得する為のメソッド
→何のデータベース？何のテーブル？

正しい例：openconnectデータベースに接続しuserテーブルからデータを取得するメソッド
-------------------
■コメントテンプレ集
-------------------
■クラスの上につけるもの

/**
 * ＃＃＃する【アクション・DAO・DTOのどれか】クラス
 * @author WATARU KUME
 * @version 1.0
 * @since 1.0
 */
-------------------
■メソッドの上につけるもの

/**
 * ＃＃＃するメソッド
 * (必要なら【@param 引数名 引数の説明】)
 * (必要なら【@return 変数名 変数の説明】)
 */

例：
@return creditCardNumber
 クレジットカード番号
@return SUCCESS/ERROR 合っていればSUCCESS 合っていなければERRORを返します。
@return true/false 合っていればtrue 合っていなければfalseを返します。
@throws SQLException SQL例外処理
@param creditCardNumber
 クレジットカード番号
-------------------
■メンバ変数
クラス定義をしている"{"と"}"の中に記述され、そしてメソッドの外に記述されている変数のことです。

 /**
  * 検索する商品名
  */
private String searchItem;

-------------------
■setter

 /**
　*　[格納する変数の説明]を格納するメソッド
  * @param [変数名] [格納する変数の説明]
  */

例： /**
     * 種類を格納するメソッド
     * @param division 種類
     */
     public void setDivision(String division) {
        this.division = division;
     }


-------------------
■getter

/**
 * [取得する変数の説明]を取得するメソッド
 * @return [変数名] [取得する変数の説明]
 */

例： /**
     * 種類を取得するメソッド
     * @return division 種類
     */
     public String getDivision() {
        return division;
     }



-------------------
■改行が必要な場合

/**

 * <p>
 * コンストラクタ(引数あり)<br>

 * クレジットカード情報を操作する為のコンストラクタを生成します。<br>

 * 引数にてデータベース名を指定する事で接続することができます。<br>

 * </p>

 */

-------------------